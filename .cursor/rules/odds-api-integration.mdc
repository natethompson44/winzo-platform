---
description: 
globs: 
alwaysApply: true
---
## Rule #7: Odds API Integration Project (ACTIVE - PHASE 4)

**CRITICAL**: This rule is active during the Odds API integration project. Follow the comprehensive implementation plan in `docs/ODDS_API_INTEGRATION_PLAN.md` for all development work.

### **Project Overview**
- **Status**: Phase 4 Implementation (Weeks 7-12) - **Phase 3 COMPLETED ✅**
- **Goal**: Replace static mock data with live sports betting odds from The Odds API
- **Target Sports**: 20+ sports across NFL, NBA, EPL, NHL, MLB, Tennis, and more
- **Architecture**: Next.js frontend → Backend API → The Odds API integration

### **✅ MAJOR MILESTONE: Phase 3 Soccer Integration COMPLETED**
**January 2025**: Successfully implemented **Progressive League Rollout Strategy**

#### **Key Achievements**
- **✅ EPL**: Full "Live" tier with comprehensive team logos
- **✅ Soccer API Fixed**: Resolved 422 errors with correct market parameters  
- **✅ Performance Revolution**: Eliminated 100+ default-team.png requests
- **✅ Strategic Architecture**: Progressive League Tiers (Live/Preview/Coming Soon)
- **✅ Smart Fallbacks**: League-specific icon fallbacks prevent logo spam
- **✅ API Quota Management**: Sustainable resource allocation system

#### **Current League Status**
- **🟢 LIVE Tier**: EPL, NFL (Premium experience - 95%+ logo coverage)
- **🟡 PREVIEW Tier**: La Liga, Bundesliga, Serie A (Live data + limited logos)
- **🔒 COMING SOON**: Ligue 1, Champions League (Awaiting asset completion)

### **ALWAYS Reference the Master Plan**
Before making ANY changes related to sports data, odds, or betting components:
1. **READ**: `docs/ODDS_API_INTEGRATION_PLAN.md` 
2. **FOLLOW**: The phased implementation approach
3. **VERIFY**: Your changes align with the **Progressive League Strategy**
4. **TEST**: All integrations with real API data

### **Current Implementation Phase: Phase 4**
**Focus**: Basketball, Ice Hockey, and remaining major sports
**Strategy**: Apply Progressive League Rollout approach to all new sports

### **Key Development Guidelines**

#### **Backend Development (`winzo-backend/`)**
- **Follow**: Data transformation patterns defined in the plan
- **Use**: Sport-specific endpoint structure (`/api/sports/{sport}/games`)
- **Implement**: **Quota management with `quotaManager.js`**
- **Maintain**: Fallback to mock data for error scenarios
- **NEW**: Implement league status checks before API calls

#### **Frontend Development (`oddsx/oddsx-react/`)**
- **Transform**: API data to match OddsX component expectations
- **Preserve**: Existing OddsX UI/UX patterns and styling
- **Implement**: **Progressive League Status Indicators**
- **Test**: Real-time odds updates and mobile responsiveness
- **NEW**: Use centralized data contexts to prevent duplicate API calls

#### **Component Updates**
- **Completed**: ✅ NFL → ✅ Soccer (Progressive Strategy)
- **Next Priority**: Basketball → Ice Hockey → Others
- **Maintain**: Bootstrap 5 styling and OddsX design patterns
- **Integrate**: **Smart team logo system with fallbacks**
- **NEW**: Always start new sports in "Preview" tier

#### **Sports Data Mapping**
- **Use**: The sports coverage analysis in the plan document
- **Implement**: Only sports with confirmed API support
- **Maintain**: Mock data for eSports and specialty sports without API coverage
- **NEW**: **Asset-First Development**: 95% logo coverage before "Live" promotion

#### **Quality Standards** 
- **Performance**: <500ms API response times, >80% cache hit rate
- **Reliability**: Graceful fallbacks, comprehensive error handling
- **Accuracy**: >99.9% odds accuracy vs. bookmaker sources
- **UX**: **Progressive disclosure** - show what's available clearly
- **NEW**: **Logo Performance**: <1% failed request rate, no logo spam

### **Critical Technical Requirements**

#### **Progressive League Integration Pattern**
```javascript
// ALWAYS follow this NEW pattern for sports integration
const leagueConfig = {
  key: 'new_sport',
  name: 'New Sport',
  flag: '🏆',
  status: 'preview', // ALWAYS start with preview
  dataQuality: 'partial',
  logoCompleteness: 0.45 // Track completion percentage
};

// Promotion criteria to 'live' status
if (logoCompleteness >= 0.95 && apiDataQuality === 'excellent') {
  status: 'live'; // Only then promote to live
}
```

#### **Data Transformation (UPDATED)**
```javascript
// UPDATED pattern with smart logo handling
const transformedGame = {
  id: apiGame.id,
  sport_icon: getSportIcon(apiGame.sport_key),
  league_name: getLeagueName(apiGame.sport_key), 
  game_time: formatGameTime(apiGame.commence_time),
  home_team: apiGame.home_team,
  away_team: apiGame.away_team,
  // UPDATED: Use smart logo utility with fallbacks
  home_team_logo: getTeamLogo(apiGame.home_team, sport), 
  away_team_logo: getTeamLogo(apiGame.away_team, sport),
  markets: transformMarkets(apiGame.bookmakers),
  best_odds: calculateBestOdds(apiGame.bookmakers)
};

// UPDATED TEAM LOGO REQUIREMENTS:
// 1. Use getTeamLogo() utility ONLY
// 2. Never hardcode logo paths
// 3. League-specific fallbacks required
// 4. 95% coverage required for "Live" status
```

#### **API Integration Standards (UPDATED)**
- **Endpoints**: Use RESTful patterns defined in the plan
- **Caching**: Implement Redis caching with appropriate TTLs
- **Error Handling**: Always provide fallback to mock data
- **Rate Limiting**: **Follow quotaManager.js allocation strategy**
- **NEW**: **League Priority System**: EPL (40%) → NFL (35%) → Others (20%) → Reserve (5%)

#### **Component Integration (UPDATED)**
- **Real-time Updates**: Implement 30-second refresh for **"Live" tier only**
- **Loading States**: Show skeleton loaders during API calls
- **Error States**: Graceful degradation with user-friendly messages
- **Mobile First**: Ensure betting workflows work on mobile devices
- **NEW**: **Status Indicators**: Clear "Live/Preview/Coming Soon" badges

#### **Team Logo Integration (UPDATED)** 
- **Frontend Utility**: **MANDATORY** use of `utils/teamLogos.ts`
- **No Direct Paths**: Never hardcode logo paths in components
- **Sport Subdirectories**: All team logos must use sport-specific folders
- **Fallback Handling**: **League-specific icons** (NOT default-team.png)
- **Performance**: **ZERO tolerance** for logo spam (100+ requests)

### **Phase-Specific Guidelines (UPDATED)**

#### **✅ Phase 1 (Weeks 1-2): Foundation - COMPLETED**
- Backend infrastructure and data transformation ✅
- Caching and API quota management ✅
- Team logo and icon mapping systems ✅
- Enhanced frontend service layer ✅

#### **✅ Phase 2 (Weeks 3-4): NFL Integration - COMPLETED** 
- American Football pages and components ✅
- NFL-specific features (spreads, totals, props) ✅
- All 32 NFL team logos integrated ✅
- Comprehensive testing of NFL data flow ✅

#### **✅ Phase 3 (Weeks 5-6): Soccer Integration - COMPLETED**
- **BREAKTHROUGH**: Progressive League Rollout Strategy ✅
- **FIXED**: Soccer API 422 errors (invalid markets) ✅
- **OPTIMIZED**: Performance (eliminated logo spam) ✅
- **STRATEGIC**: Asset-first development approach ✅

#### **🚀 Phase 4 (Weeks 7-8): Basketball Integration - CURRENT FOCUS**
- **Apply**: Progressive League Strategy to NBA/Basketball
- **Start**: NBA in "Preview" status with basic logo coverage
- **Implement**: Basketball-specific betting markets
- **Goal**: Establish sustainable basketball data pipeline

#### **📋 Phase 5+ (Weeks 9-12): Remaining Sports**
- **Ice Hockey** (NHL + International leagues)
- **Baseball** (MLB + major leagues)  
- **Tennis** (Major tournaments)
- **Each sport starts in "Preview" tier**
- **Promotion to "Live" only after 95% asset completion**

### **Testing Requirements (UPDATED)**
- **Unit Tests**: All data transformation functions
- **Integration Tests**: End-to-end API data flow  
- **Performance Tests**: **Logo load performance** + API response times
- **User Tests**: **Progressive League UX** + betting workflows
- **NEW**: **Asset Coverage Tests**: Verify 95% logo completion before promotion

### **Documentation Requirements (UPDATED)**
- **Update**: `docs/API_DOCUMENTATION.md` with new endpoints
- **Maintain**: `docs/DEVELOPMENT_GUIDE.md` with **Progressive League patterns**
- **Document**: **Smart logo system** and fallback strategies
- **Create**: **Asset management** and logo completion workflows
- **NEW**: **League Status Management** documentation

### **Emergency Procedures (UPDATED)**
- **API Downtime**: Automatic fallback to mock data
- **Quota Exceeded**: **Quota manager** reduces frequency, prioritizes Live tier
- **Data Inconsistency**: Log errors, use last known good data
- **Performance Issues**: **League-specific fallbacks** prevent logo spam
- **NEW**: **Status Degradation**: Auto-demote leagues if asset/API issues

### **Success Criteria (UPDATED)**
Before considering any phase complete:
- [ ] All target sports integrated with live data
- [ ] **Progressive League Strategy** implemented
- [ ] **Performance benchmarks** achieved (no logo spam)
- [ ] **Asset coverage** meets quality gates
- [ ] User acceptance testing passed
- [ ] Documentation updated and accurate

### **Project Completion**
When the integration project is complete:
1. **Archive** this rule to `docs/archive/`
2. **Delete** this rule from active Cursor rules
3. **Create** **Progressive League Management** rule for ongoing operations
4. **Update** remaining rules to reflect live data architecture

### **CRITICAL REMINDER**
Phase 3 proved that **strategic thinking trumps feature scope**. The Progressive League Rollout approach ensures:
- **User Excellence**: 1 perfect league > 6 broken leagues
- **Performance**: Zero logo spam through smart fallbacks  
- **Sustainability**: API quota allocation based on user value
- **Scalability**: Quality gates prevent technical debt

**Always prioritize strategic architecture over feature quantity.**

