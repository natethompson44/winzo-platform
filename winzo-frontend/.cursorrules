# Winzo Frontend Development Rules

## 1. General Principles

### Adhere to Vision Documents
- Every implementation decision must align with the six vision documents (01_Project_Vision.md through 06_Deployment_Vision.md)
- Reference them explicitly in code comments if a choice is derived from a specific section
- Example: "// Per 02_Styling_Vision.md: Use --primary for CTAs"

### Vanilla Tech Stack Only
- Use pure HTML5, CSS3, and JavaScript (ES6+)
- NO frameworks (React, Vue, Bootstrap), libraries, or external dependencies
- All code must be self-contained

### Mobile-First and Responsive
- Start all CSS with base styles for small screens (<768px)
- Use media queries for tablets (768px+) and desktops (1024px+)
- Test responsiveness in browser dev tools

### Modularity and Reusability
- Design components as CSS classes that can be applied anywhere without duplication
- Avoid inline styles; use classes and variables
- Create reusable component patterns

### Placeholders Over Dynamics
- Use static dummy content (Lorem ipsum, placeholder.png for images, hardcoded data)
- NO API calls, fetch, or dynamic JS yet
- script.js should only handle basic interactions like menu toggles

### Semantic and Accessible Code
- Use semantic HTML tags (<header>, <nav>, <main>, <footer>)
- Ensure accessibility: ARIA attributes where appropriate
- Focus states with outlines/shadows
- Contrast ratios meeting WCAG AA (4.5:1 for text)

### Consistency Enforcement
- Follow defined color palette, typography scale, spacing rhythm (multiples of 0.5rem/1rem)
- No deviations unless explicitly justified in comments
- Maintain consistent naming conventions

### Error Handling in Rules
- If rule conflicts arise between phases, prioritize later phases
- Log issues in comments for review

## 2. Phased Implementation Rules

### Phase 1: Project Setup & Core Structure
- Initialize files exactly as specified: index.html (skeleton with header/nav/main/footer), style.css (empty), script.js (empty), README.md
- Navigation in index.html is basic placeholder with dummy links; no functionality yet
- Commit: "Phase 1: Initial setup and skeleton"

### Phase 2: Global Styling & Typography
- Use CSS variables for colors (--primary: #007BFF)
- Include resets (* { margin: 0; ... }), typography (Arial for body, Helvetica for headings, rem-based sizes)
- No component-specific styles hereâ€”keep global
- Commit: "Phase 2: Global styling and typography"

### Phase 3: Component Library - Buttons & Forms
- Buttons: Define .btn base class, then variations (.btn-primary, .btn-outline), states (:hover, :active, :focus, .btn-disabled), sizes (.btn-small, etc.)
- Use transitions for smooth interactions
- Forms: Style inputs, labels, checkboxes/radios, and .error-message
- Ensure full-width on mobile
- Add demo snippets to index.html's main section, but keep them commented or in a <section> for easy removal
- Commit: "Phase 3: Button and form components"

### Phase 4: Navigation & Layout Grid
- Navigation: Use Flexbox for .nav-container, implement hamburger for mobile (display: none/block; toggle via simple JS)
- Grid: Use CSS Grid with .container { grid-template-columns: repeat(12, 1fr); }
- Define spans for .main-content (8 cols) and .sidebar (4 cols); stack on mobile
- Demo: Add grid examples to index.html, using placeholders
- Handle auth states in nav comments
- Commit: "Phase 4: Navigation and grid layout"

### Phase 5: Sports Page Template (Single Sport Focus)
- Create sport_template.html mirroring index.html structure but with sport-specific content
- Use grid for events: Rigid columns (date 1fr, time 1fr, home 2fr, away 2fr, odds 3fr) to prevent shifts
- Placeholders: Hardcode 2-3 dummy events for Football; include img src="placeholder-logo.png"
- Ensure scalability: Comment how to adapt for other sports
- Commit: "Phase 5: Sports page template"

### Phase 6: Deployment & Version Control
- Git: Use feature branches if extending, but for this, commit per phase on main
- Messages must be descriptive
- README.md: Add Netlify steps (connect repo, no build command, root dir)
- No environment vars yet, but comment potential ones
- Final commit: "Phase 6: Deployment prep and final touches"

## 3. Code Quality and Best Practices

### Indentation and Formatting
- Use 4 spaces for indentation in HTML/JS, 2 for CSS
- Consistent line endings (LF)
- Proper spacing and organization

### Comments
- Add comments for each section (e.g., /* Buttons */)
- Explain non-obvious choices
- Reference vision documents when applicable

### File Organization
- Keep style.css organized by sections (resets, variables, typography, components, layouts)
- No separate CSS files unless specified
- Maintain logical structure

### Performance
- Minimize CSS selectors depth
- Use efficient layouts (prefer Grid over Flex for 2D)
- Optimize for mobile performance

### Testing
- After each phase, instruct to open in browser, resize window, and check console for errors
- No automated tests yet
- Manual testing required

### Security
- Avoid inline JS/CSS
- No user input handling yet
- Follow security best practices

### Version Control
- Always stage and commit phase-by-phase
- Use git log to verify
- Descriptive commit messages

## 4. Interaction and Output Rules

### Sequential Execution
- Implement one phase at a time
- Output code changes directly
- No assumptions or extra features

### Feedback Loop
- Include "Test this phase" notes with steps
- Provide clear testing instructions
- Consider edge cases

### Updates
- If rules need amendment, propose in separate "Rule Update Suggestion" section
- Maintain consistency across phases
